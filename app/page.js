// Page.js Application
// Created by Clay Beal

"use client";

import { useState } from "react";
import { playGame } from "./game";

// https://learn.adafruit.com/adafruit-bluefruit-le-shield/uart-service
const UART_SERVICE_UUID = "6e400001-b5a3-f393-e0a9-e50e24dcca9e";
// TX characteristic: device -> client notifications
const TX_CHARACTERISTIC_UUID = "6e400003-b5a3-f393-e0a9-e50e24dcca9e";

// Handles the connection to the bluefruit device
export async function connectBluefruit() {
  try {
    // Link showed me all the steps in connecting to bluetooth web api
    // https://www.hatchd.com.au/blog/web-bluetooth-api
    const device = await navigator.bluetooth.requestDevice({
      //filters: [{ name: "CIRCUITPY3073" }],
      acceptAllDevices: true, // You can have it only search for your specific device using the commented line
      optionalServices: [UART_SERVICE_UUID],
    });
    const server = await device.gatt.connect();
    const service = await server.getPrimaryService(UART_SERVICE_UUID);
    const txCharacteristic = await service.getCharacteristic(TX_CHARACTERISTIC_UUID);
    return { device, txCharacteristic };
  } catch (error) {
    console.error("Error connecting to Bluefruit device:", error);
    throw error;
  }
}

// This function is responsible for setting up notifications and adding the event listener
export async function listenBluefruit(txCharacteristic, onMessageReceived) {
  try {
    // Begin to accept notifications
    await txCharacteristic.startNotifications();
    // When you receive messages decode them and ship them off to a handling function
    txCharacteristic.addEventListener("characteristicvaluechanged", (event) => {
      const value = event.target.value;
      const decoder = new TextDecoder("utf-8");
      const message = decoder.decode(value);
      // Pass the message back to update the UI or any callback you provide.
      onMessageReceived(message);
    });
  } catch (error) {
    console.error("Error setting up notifications:", error);
    throw error;
  }
}

function scrollToGameContainer() {
  // Scrolls down to the bottom of the screen (where the game is)
  const container = document.getElementById("game-container");
  if (container) {
    container.scrollIntoView({ behavior: "smooth" });
  }
}

function resetGame() {
  // Clear the contents of the game container (generated by Chat-GPT)
  const container = document.getElementById("game-container");
  if (container) {
    container.innerHTML = ""; // This removes the previous canvas and any child elements
  }
  // Start a new game
  playGame();
  scrollToGameContainer();
}

// All of these functions define a keypress which is how you would
// play the game on the keyboard
async function goForward() {
  const keyEventDown = new KeyboardEvent("keydown", {
    key: "w",
    code: "KeyW",
    keyCode: 87,
    which: 87,
    bubbles: true,
  });
  document.dispatchEvent(keyEventDown);
}

async function goBackward() {
  const keyEventDown = new KeyboardEvent("keydown", {
    key: "s",
    code: "KeyS",
    keyCode: 83,
    which: 83,
    bubbles: true,
  });
  document.dispatchEvent(keyEventDown);
}

async function goLeft() {
  const keyEventDown = new KeyboardEvent("keydown", {
    key: "a",
    code: "KeyA",
    keyCode: 65,
    which: 65,
    bubbles: true,
  });
  document.dispatchEvent(keyEventDown);
}

async function goRight() {
  const keyEventDown = new KeyboardEvent("keydown", {
    key: "d",
    code: "KeyD",
    keyCode: 68,
    which: 68,
    bubbles: true,
  });
  document.dispatchEvent(keyEventDown);
}

function releaseAllKeys() {
  // Keyup all keys
  const keys = [
    { key: "w", code: "KeyW", keyCode: 87 },
    { key: "a", code: "KeyA", keyCode: 65 },
    { key: "s", code: "KeyS", keyCode: 83 },
    { key: "d", code: "KeyD", keyCode: 68 }
  ];
  
  keys.forEach(({ key, code, keyCode }) => {
    const event = new KeyboardEvent("keyup", {
      key,
      code,
      keyCode,
      which: keyCode,
      bubbles: true,
    });
    document.dispatchEvent(event);
  });
}

export default function Page() {
  // Keep track of whether you are connected to the bluetooth or not
  const [status, setStatus] = useState("Not connected");

  // Will receive the command from the device (x-coord, z-coord)
  const processCommand = (command) => {
    // Split the input and get the accelerometer values
    const parts = command.trim().split(',');
    const xVal = parseFloat(parts[0]);
    const zVal = parseFloat(parts[1]);

    console.log(xVal, zVal);

    // release the previous keys before you change the upcoming ones
    // decipher the direction of travel
    releaseAllKeys();
    if (xVal > 4 && zVal > 4) {
      goForward();
      goLeft();
    } else if (xVal > 4 && zVal < -4) {
      goBackward();
      goLeft();
    } else if (xVal < -4 && zVal > 4) {
      goForward();
      goRight();
    } else if (xVal < -4 && zVal < -4) {
      goBackward();
      goRight();
    } else if (xVal > 4) {
      goLeft();
    } else if (xVal < -4) {
      goRight();
    } else if (zVal > 4) {
      goForward();
    } else if (zVal < -4) {
      goBackward();
    }
  }

  // When you connect display a message for the user to see if successful
  // and start the game/begin listening to user input on the device
  const handleConnect = async () => {
    setStatus("Connecting...");
    try {
      const { device, txCharacteristic } = await connectBluefruit();
      setStatus(`Connected to ${device.name}`);

      // Set up notifications to handle incoming commands
      await listenBluefruit(txCharacteristic, processCommand);

      // Start the game after device is connected
      playGame();
      scrollToGameContainer();
    } catch (error) {
      setStatus("Connection failed");
      console.error(error);
    }
  };
  
  return (
    // Minimal front-end :)
    <div>
      <h2>React Bluefruit Game</h2>
      <button onClick={handleConnect}>Connect</button>
      <p>Status: {status}</p>
      <button onClick={resetGame}>Reset Game</button>
      <div id="game-container" style={{ position: "relative" }}></div>
    </div>  
  );
}